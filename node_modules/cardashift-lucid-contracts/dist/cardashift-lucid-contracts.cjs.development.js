'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lucidCardano = require('lucid-cardano');

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var groupBy = function groupBy(array, predicate) {
  return array.reduce(function (acc, cur) {
    var key = predicate(cur);

    if (!acc[key]) {
      acc[key] = [];
    }

    acc[key].push(cur);
    return acc;
  }, {});
};

var deduplicateUtxosReducer = function deduplicateUtxosReducer(acc, cur) {
  return [].concat(acc, cur.utxos.filter(function (newUtxo) {
    return !acc.some(function (existingUtxo) {
      return newUtxo.txHash === existingUtxo.txHash && newUtxo.outputIndex === existingUtxo.outputIndex;
    });
  }));
};
var claimChecks = function claimChecks(lucid) {
  return function (pkh, unlockTime, assets) {
    return [// unlock time check
    function () {
      return lucid.utils.unixTimeToSlot(Date.now()) > unlockTime;
    }, // assetlcass check
    function (u) {
      var assetsConcat = assets.map(function (asset) {
        var assetConcat = asset.currencySymbol + asset.tokenName;

        if (!assetConcat.length) {
          assetConcat = "lovelace";
        }

        return assetConcat;
      });
      var containsAssets = assetsConcat.some(function (asset) {
        return Object.keys(u.assets).includes(asset);
      });
      return !!u.assets && containsAssets;
    }, // Object.keys(u.assets).includes(
    //   assets.currencySymbol + assets.tokenName
    // ),
    function () {
      return !!pkh;
    }];
  };
};
var buildTimelockedNativeScript = function buildTimelockedNativeScript(slot, pkh) {
  var ns = lucidCardano.C.NativeScripts["new"]();
  ns.add(lucidCardano.C.NativeScript.new_timelock_start(lucidCardano.C.TimelockStart["new"](lucidCardano.C.BigNum.from_str(slot.toString()))));
  ns.add(lucidCardano.C.NativeScript.new_script_pubkey(lucidCardano.C.ScriptPubkey["new"](lucidCardano.C.Ed25519KeyHash.from_hex(pkh))));
  var scriptAll = lucidCardano.C.ScriptAll["new"](ns);
  return lucidCardano.C.NativeScript.new_script_all(scriptAll);
};
var groupByScript = function groupByScript(toClaim) {
  var withAddress = Object.entries(toClaim).map(function (_ref) {
    var address = _ref[0],
        entries = _ref[1];
    return entries.map(function (entry) {
      return _extends({
        address: address
      }, entry);
    });
  }).flat(); // groups native scripts by address and native script (pkh and unlockTime)
  // This is to extract unique products of the form { address, nativeScript }

  var groupedByAddress = groupBy(withAddress, function (entry) {
    return entry.address + entry.nativeScript.pkh + entry.nativeScript.unlockTime;
  }); // traverse each individual group and merge the assets field

  var mergedAssets = Object.values(groupedByAddress).map(function (entries) {
    return entries.reduce(function (acc, entry) {
      return _extends({}, acc, {
        assets: [].concat(acc.assets, [entry.asset])
      });
    }, _extends({}, entries[0], {
      assets: []
    }));
  });
  return mergedAssets;
};

var lookupAvailableFunds = function lookupAvailableFunds(lucid) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(toClaim) {
      var groupedByScript, addressesWithUtxos;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              groupedByScript = groupByScript(toClaim);
              _context2.next = 3;
              return Promise.all(groupedByScript.map( /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(x) {
                  var utxos, predicates, claimableUtxos;
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return lucid.utxosAt(x.address);

                        case 2:
                          utxos = _context.sent;
                          predicates = claimChecks(lucid)(x.nativeScript.pkh, x.nativeScript.unlockTime, x.assets);
                          claimableUtxos = utxos.filter(function (u) {
                            return predicates.every(function (p) {
                              return p(u);
                            });
                          });
                          return _context.abrupt("return", {
                            utxos: claimableUtxos,
                            nativeScript: x.nativeScript,
                            address: x.address
                          });

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref2.apply(this, arguments);
                };
              }()));

            case 3:
              addressesWithUtxos = _context2.sent;
              return _context2.abrupt("return", addressesWithUtxos.filter(function (x) {
                return !!x.utxos.length;
              }));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

var totalClaimableUtxos = function totalClaimableUtxos(flattenedUtxos) {
  return flattenedUtxos.reduce(deduplicateUtxosReducer, []).map(function (x) {
    return x.assets;
  }).flat().reduce(function (acc, cur) {
    return Object.entries(cur).reduce(function (acc2, _ref3) {
      var _extends2, _extends3;

      var a = _ref3[0],
          v = _ref3[1];
      return a in acc2 ? _extends({}, acc2, (_extends2 = {}, _extends2[a] = acc2[a].valueOf() + v.valueOf(), _extends2)) : _extends({}, acc2, (_extends3 = {}, _extends3[a] = v, _extends3));
    }, acc);
  }, {});
};

var claimVestedFunds = function claimVestedFunds(lucid) {
  return /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(toClaim) {
      var claimableUtxos, natives, tx, txScriptAttached, signed, txHash;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return lookupAvailableFunds(lucid)(toClaim);

            case 2:
              claimableUtxos = _context3.sent;

              if (claimableUtxos.length) {
                _context3.next = 5;
                break;
              }

              throw Error("Nothing to claim");

            case 5:
              natives = claimableUtxos.map(function (x) {
                return buildTimelockedNativeScript(x.nativeScript.unlockTime, x.nativeScript.pkh);
              });
              _context3.t0 = lucid.newTx().collectFrom(claimableUtxos.map(function (x) {
                return x.utxos;
              }).flat());
              _context3.next = 9;
              return lucid.wallet.address();

            case 9:
              _context3.t1 = _context3.sent;
              _context3.t2 = totalClaimableUtxos(claimableUtxos);
              tx = _context3.t0.payToAddress.call(_context3.t0, _context3.t1, _context3.t2);
              natives.forEach(function (n) {
                return tx.txBuilder.add_native_script(n);
              });
              _context3.next = 15;
              return tx.validFrom(Date.now() - 100000).complete();

            case 15:
              txScriptAttached = _context3.sent;
              _context3.next = 18;
              return txScriptAttached.sign().complete();

            case 18:
              signed = _context3.sent;
              _context3.next = 21;
              return signed.submit();

            case 21:
              txHash = _context3.sent;
              return _context3.abrupt("return", txHash);

            case 23:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3) {
      return _ref4.apply(this, arguments);
    };
  }();
};
/**
 * Initialise the library and expose lib API
 * @param {string} blockfrostUrl Blockfrost API URL
 * @param {string} apiKey Blockfrost API Key
 * @param wallet Either bech32 encoded signing key or a browser wallet provider.
 * @param {string} [network]
 * @namespace cardashift-lucid-contracts
 */


var init = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(blockfrostUrl, apiKey, wallet, network) {
    var lucid, getEndpointData;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (network === void 0) {
              network = "Testnet";
            }

            _context6.next = 3;
            return lucidCardano.Lucid["new"](new lucidCardano.Blockfrost(blockfrostUrl, apiKey), network);

          case 3:
            lucid = _context6.sent;

            if (wallet.startsWith("ed25519")) {
              lucid.selectWalletFromPrivateKey(wallet);
            } else {
              // For browser wallet:
              lucid.selectWallet(wallet);
            }

            getEndpointData = function getEndpointData() {
              return fetch("http://localhost:8000/data.json").then(function (r) {
                return r.json();
              });
            };

            return _context6.abrupt("return", {
              /**
               * Query and return available funds that can be claimed optionally based on
               * given claim data, otherwise fetches claim data from configured endpoint otherwise.
               * @memberof cardashift-lucid-contracts
               */
              fundsAvailable: function () {
                var _fundsAvailable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(epData) {
                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.t0 = totalClaimableUtxos;
                          _context4.t1 = lookupAvailableFunds(lucid);
                          _context4.t2 = epData;

                          if (_context4.t2) {
                            _context4.next = 7;
                            break;
                          }

                          _context4.next = 6;
                          return getEndpointData();

                        case 6:
                          _context4.t2 = _context4.sent;

                        case 7:
                          _context4.t3 = _context4.t2;
                          _context4.next = 10;
                          return (0, _context4.t1)(_context4.t3);

                        case 10:
                          _context4.t4 = _context4.sent;
                          return _context4.abrupt("return", (0, _context4.t0)(_context4.t4));

                        case 12:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                function fundsAvailable(_x8) {
                  return _fundsAvailable.apply(this, arguments);
                }

                return fundsAvailable;
              }(),

              /**
               * Claim available funds optionally from given claim data when param is
               * provided, otherwise request claim data from configured endpoint.
               * @memberof cardashift-lucid-contracts
               * @param {ToClaim} [epData] Optional endpoint data to claim from
               */
              claimFunds: function () {
                var _claimFunds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(epData) {
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.t0 = claimVestedFunds(lucid);
                          _context5.t1 = epData;

                          if (_context5.t1) {
                            _context5.next = 6;
                            break;
                          }

                          _context5.next = 5;
                          return getEndpointData();

                        case 5:
                          _context5.t1 = _context5.sent;

                        case 6:
                          _context5.t2 = _context5.t1;
                          return _context5.abrupt("return", (0, _context5.t0)(_context5.t2));

                        case 8:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                function claimFunds(_x9) {
                  return _claimFunds.apply(this, arguments);
                }

                return claimFunds;
              }()
            });

          case 7:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function init(_x4, _x5, _x6, _x7) {
    return _ref5.apply(this, arguments);
  };
}();

exports.default = init;
//# sourceMappingURL=cardashift-lucid-contracts.cjs.development.js.map

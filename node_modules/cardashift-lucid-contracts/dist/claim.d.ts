import { Assets, Network, WalletProvider } from "lucid-cardano";
import { ToClaim } from "./util";
declare global {
    interface Window {
        cardano: any;
    }
}
/**
 * Initialise the library and expose lib API
 * @param {string} blockfrostUrl Blockfrost API URL
 * @param {string} apiKey Blockfrost API Key
 * @param wallet Either bech32 encoded signing key or a browser wallet provider.
 * @param {string} [network]
 * @namespace cardashift-lucid-contracts
 */
declare const init: (blockfrostUrl: string, apiKey: string, wallet: string | WalletProvider, network?: Network) => Promise<{
    /**
     * Query and return available funds that can be claimed optionally based on
     * given claim data, otherwise fetches claim data from configured endpoint otherwise.
     * @memberof cardashift-lucid-contracts
     */
    fundsAvailable: (epData?: ToClaim | undefined) => Promise<Assets>;
    /**
     * Claim available funds optionally from given claim data when param is
     * provided, otherwise request claim data from configured endpoint.
     * @memberof cardashift-lucid-contracts
     * @param {ToClaim} [epData] Optional endpoint data to claim from
     */
    claimFunds: (epData?: ToClaim | undefined) => Promise<string>;
}>;
export default init;

{"version":3,"file":"cardashift-lucid-contracts.cjs.production.min.js","sources":["../src/util.ts","../src/claim.ts"],"sourcesContent":["import { C, Lucid, PaymentKeyHash, UTxO } from \"lucid-cardano\";\n\ntype ScriptAssets = {\n  address: string;\n  nativeScript: { pkh: string; unlockTime: number };\n  assets: { currencySymbol: string; tokenName: string }[];\n};\n\nconst groupBy = <T>(array: T[], predicate: (_a: T) => string) =>\n  array.reduce((acc: { [key: string]: T[] }, cur: T) => {\n    const key = predicate(cur);\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(cur);\n    return acc;\n  }, {});\n\nexport type ToClaim = {\n  [key: string]: {\n    nativeScript: { pkh: string; unlockTime: number };\n    asset: { currencySymbol: string; tokenName: string };\n  }[];\n};\n\nexport const deduplicateUtxosReducer = (\n  acc: UTxO[],\n  cur: { utxos: UTxO[]; nativeScript: any }\n) => [\n  ...acc,\n  ...cur.utxos.filter(\n    (newUtxo) =>\n      !acc.some(\n        (existingUtxo) =>\n          newUtxo.txHash === existingUtxo.txHash &&\n          newUtxo.outputIndex === existingUtxo.outputIndex\n      )\n  ),\n];\n\nexport const claimChecks =\n  (lucid: Lucid) =>\n  (\n    pkh: PaymentKeyHash,\n    unlockTime: number,\n    assets: { currencySymbol: string; tokenName: string }[]\n  ) =>\n    [\n      // unlock time check\n      () => lucid.utils.unixTimeToSlot(Date.now()) > unlockTime,\n      // assetlcass check\n      (u: UTxO) => {\n        const assetsConcat = assets.map((asset) => {\n          let assetConcat = asset.currencySymbol + asset.tokenName;\n          if (!assetConcat.length) {\n            assetConcat = \"lovelace\";\n          }\n          return assetConcat;\n        });\n\n        const containsAssets = assetsConcat.some((asset) =>\n          Object.keys(u.assets).includes(asset)\n        );\n\n        return !!u.assets && containsAssets;\n      },\n      // Object.keys(u.assets).includes(\n      //   assets.currencySymbol + assets.tokenName\n      // ),\n      () => !!pkh,\n    ];\n\nexport const buildTimelockedNativeScript = (slot: number, pkh: string) => {\n  const ns = C.NativeScripts.new();\n\n  ns.add(\n    C.NativeScript.new_timelock_start(\n      C.TimelockStart.new(C.BigNum.from_str(slot.toString()))\n    )\n  );\n  ns.add(\n    C.NativeScript.new_script_pubkey(\n      C.ScriptPubkey.new(C.Ed25519KeyHash.from_hex(pkh))\n    )\n  );\n\n  const scriptAll = C.ScriptAll.new(ns);\n  return C.NativeScript.new_script_all(scriptAll);\n};\n\nexport const groupByScript = (toClaim: ToClaim): ScriptAssets[] => {\n  // flattened entries into an array of native script with address as field\n  type SingleScriptAsset = {\n    nativeScript: { pkh: string; unlockTime: number };\n    asset: { currencySymbol: string; tokenName: string };\n    address: string;\n  };\n\n  const withAddress: SingleScriptAsset[] = Object.entries(toClaim)\n    .map(([address, entries]) =>\n      entries.map((entry) => ({ address, ...entry }))\n    )\n    .flat();\n\n  // groups native scripts by address and native script (pkh and unlockTime)\n  // This is to extract unique products of the form { address, nativeScript }\n  const groupedByAddress: {\n    [address: string]: SingleScriptAsset[];\n  } = groupBy(\n    withAddress,\n    (entry) =>\n      entry.address + entry.nativeScript.pkh + entry.nativeScript.unlockTime\n  );\n\n  // traverse each individual group and merge the assets field\n  const mergedAssets: ScriptAssets[] = Object.values(groupedByAddress).map(\n    (entries) =>\n      entries.reduce(\n        (acc: ScriptAssets, entry) => ({\n          ...acc,\n          assets: [...acc.assets, entry.asset],\n        }),\n        { ...entries[0], assets: [] }\n      )\n  );\n\n  return mergedAssets;\n};\n","import {\n  Lucid,\n  Blockfrost,\n  UTxO,\n  Assets,\n  Network,\n  WalletProvider,\n} from \"lucid-cardano\";\nimport {\n  buildTimelockedNativeScript,\n  claimChecks,\n  deduplicateUtxosReducer,\n  groupByScript,\n  ToClaim,\n} from \"./util\";\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    cardano: any;\n  }\n}\n\nconst lookupAvailableFunds = (lucid: Lucid) => async (toClaim: ToClaim) => {\n  const groupedByScript = groupByScript(toClaim);\n\n  const addressesWithUtxos = await Promise.all(\n    groupedByScript.map(async (x) => {\n      const utxos = await lucid.utxosAt(x.address);\n\n      const predicates = claimChecks(lucid)(\n        x.nativeScript.pkh,\n        x.nativeScript.unlockTime,\n        x.assets\n      );\n\n      const claimableUtxos = utxos.filter((u) => predicates.every((p) => p(u)));\n\n      return {\n        utxos: claimableUtxos,\n        nativeScript: x.nativeScript,\n        address: x.address,\n      };\n    })\n  );\n\n  return addressesWithUtxos.filter((x) => !!x.utxos.length);\n};\n\nconst totalClaimableUtxos = (\n  flattenedUtxos: {\n    utxos: UTxO[];\n    nativeScript: { pkh: string; unlockTime: number };\n  }[]\n) =>\n  flattenedUtxos\n    .reduce(deduplicateUtxosReducer, [])\n    .map((x) => x.assets)\n    .flat()\n    .reduce(\n      (acc: Assets, cur: Assets) =>\n        Object.entries(cur).reduce(\n          (acc2: Assets, [a, v]) =>\n            a in acc2\n              ? { ...acc2, [a]: acc2[a].valueOf() + v.valueOf() }\n              : { ...acc2, [a]: v },\n          acc\n        ),\n      {}\n    );\n\nconst claimVestedFunds = (lucid: Lucid) => async (toClaim: ToClaim) => {\n  const claimableUtxos = await lookupAvailableFunds(lucid)(toClaim);\n\n  if (!claimableUtxos.length) throw Error(\"Nothing to claim\");\n\n  const natives = claimableUtxos.map((x) =>\n    buildTimelockedNativeScript(x.nativeScript.unlockTime, x.nativeScript.pkh)\n  );\n\n  const tx = lucid\n    .newTx()\n    .collectFrom(claimableUtxos.map((x) => x.utxos).flat())\n    .payToAddress(\n      await lucid.wallet.address(),\n      totalClaimableUtxos(claimableUtxos)\n    );\n\n  natives.forEach((n) => tx.txBuilder.add_native_script(n));\n\n  const txScriptAttached = await tx.validFrom(Date.now() - 100000).complete();\n\n  const signed = await txScriptAttached.sign().complete();\n\n  const txHash = await signed.submit();\n  return txHash;\n};\n\n/**\n * Initialise the library and expose lib API\n * @param {string} blockfrostUrl Blockfrost API URL\n * @param {string} apiKey Blockfrost API Key\n * @param wallet Either bech32 encoded signing key or a browser wallet provider.\n * @param {string} [network]\n * @namespace cardashift-lucid-contracts\n */\nconst init = async (\n  blockfrostUrl: string,\n  apiKey: string,\n  wallet: string | WalletProvider,\n  network: Network = \"Testnet\"\n) => {\n  const lucid = await Lucid.new(new Blockfrost(blockfrostUrl, apiKey), network);\n\n  if (wallet.startsWith(\"ed25519\")) {\n    lucid.selectWalletFromPrivateKey(wallet);\n  } else {\n    // For browser wallet:\n    lucid.selectWallet(wallet);\n  }\n\n  const getEndpointData = (): Promise<ToClaim> =>\n    fetch(\"http://localhost:8000/data.json\").then((r) => r.json());\n\n  return {\n    /**\n     * Query and return available funds that can be claimed optionally based on\n     * given claim data, otherwise fetches claim data from configured endpoint otherwise.\n     * @memberof cardashift-lucid-contracts\n     */\n    fundsAvailable: async (epData?: ToClaim) =>\n      totalClaimableUtxos(\n        await lookupAvailableFunds(lucid)(epData || (await getEndpointData()))\n      ),\n    /**\n     * Claim available funds optionally from given claim data when param is\n     * provided, otherwise request claim data from configured endpoint.\n     * @memberof cardashift-lucid-contracts\n     * @param {ToClaim} [epData] Optional endpoint data to claim from\n     */\n    claimFunds: async (epData?: ToClaim) =>\n      claimVestedFunds(lucid)(epData || (await getEndpointData())),\n  };\n};\n\nexport default init;\n"],"names":["deduplicateUtxosReducer","acc","cur","utxos","filter","newUtxo","some","existingUtxo","txHash","outputIndex","claimChecks","lucid","pkh","unlockTime","assets","utils","unixTimeToSlot","Date","now","u","containsAssets","map","asset","assetConcat","currencySymbol","tokenName","length","Object","keys","includes","buildTimelockedNativeScript","slot","ns","C","NativeScripts","add","NativeScript","new_timelock_start","TimelockStart","BigNum","from_str","toString","new_script_pubkey","ScriptPubkey","Ed25519KeyHash","from_hex","scriptAll","ScriptAll","new_script_all","groupByScript","toClaim","predicate","withAddress","entries","address","entry","flat","groupedByAddress","nativeScript","reduce","key","push","values","lookupAvailableFunds","groupedByScript","_context2","Promise","all","x","_context","utxosAt","predicates","claimableUtxos","every","p","totalClaimableUtxos","flattenedUtxos","acc2","a","v","valueOf","claimVestedFunds","_context3","Error","natives","newTx","collectFrom","wallet","tx","payToAddress","forEach","n","txBuilder","add_native_script","validFrom","complete","txScriptAttached","sign","signed","submit","blockfrostUrl","apiKey","network","_context6","Lucid","Blockfrost","startsWith","selectWalletFromPrivateKey","selectWallet","getEndpointData","fetch","then","r","json","fundsAvailable","epData","_context4","claimFunds","_context5"],"mappings":"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"}
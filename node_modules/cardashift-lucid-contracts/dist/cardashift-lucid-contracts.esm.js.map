{"version":3,"file":"cardashift-lucid-contracts.esm.js","sources":["../src/util.ts","../src/claim.ts"],"sourcesContent":["import { C, Lucid, PaymentKeyHash, UTxO } from \"lucid-cardano\";\n\ntype ScriptAssets = {\n  address: string;\n  nativeScript: { pkh: string; unlockTime: number };\n  assets: { currencySymbol: string; tokenName: string }[];\n};\n\nconst groupBy = <T>(array: T[], predicate: (_a: T) => string) =>\n  array.reduce((acc: { [key: string]: T[] }, cur: T) => {\n    const key = predicate(cur);\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(cur);\n    return acc;\n  }, {});\n\nexport type ToClaim = {\n  [key: string]: {\n    nativeScript: { pkh: string; unlockTime: number };\n    asset: { currencySymbol: string; tokenName: string };\n  }[];\n};\n\nexport const deduplicateUtxosReducer = (\n  acc: UTxO[],\n  cur: { utxos: UTxO[]; nativeScript: any }\n) => [\n  ...acc,\n  ...cur.utxos.filter(\n    (newUtxo) =>\n      !acc.some(\n        (existingUtxo) =>\n          newUtxo.txHash === existingUtxo.txHash &&\n          newUtxo.outputIndex === existingUtxo.outputIndex\n      )\n  ),\n];\n\nexport const claimChecks =\n  (lucid: Lucid) =>\n  (\n    pkh: PaymentKeyHash,\n    unlockTime: number,\n    assets: { currencySymbol: string; tokenName: string }[]\n  ) =>\n    [\n      // unlock time check\n      () => lucid.utils.unixTimeToSlot(Date.now()) > unlockTime,\n      // assetlcass check\n      (u: UTxO) => {\n        const assetsConcat = assets.map((asset) => {\n          let assetConcat = asset.currencySymbol + asset.tokenName;\n          if (!assetConcat.length) {\n            assetConcat = \"lovelace\";\n          }\n          return assetConcat;\n        });\n\n        const containsAssets = assetsConcat.some((asset) =>\n          Object.keys(u.assets).includes(asset)\n        );\n\n        return !!u.assets && containsAssets;\n      },\n      // Object.keys(u.assets).includes(\n      //   assets.currencySymbol + assets.tokenName\n      // ),\n      () => !!pkh,\n    ];\n\nexport const buildTimelockedNativeScript = (slot: number, pkh: string) => {\n  const ns = C.NativeScripts.new();\n\n  ns.add(\n    C.NativeScript.new_timelock_start(\n      C.TimelockStart.new(C.BigNum.from_str(slot.toString()))\n    )\n  );\n  ns.add(\n    C.NativeScript.new_script_pubkey(\n      C.ScriptPubkey.new(C.Ed25519KeyHash.from_hex(pkh))\n    )\n  );\n\n  const scriptAll = C.ScriptAll.new(ns);\n  return C.NativeScript.new_script_all(scriptAll);\n};\n\nexport const groupByScript = (toClaim: ToClaim): ScriptAssets[] => {\n  // flattened entries into an array of native script with address as field\n  type SingleScriptAsset = {\n    nativeScript: { pkh: string; unlockTime: number };\n    asset: { currencySymbol: string; tokenName: string };\n    address: string;\n  };\n\n  const withAddress: SingleScriptAsset[] = Object.entries(toClaim)\n    .map(([address, entries]) =>\n      entries.map((entry) => ({ address, ...entry }))\n    )\n    .flat();\n\n  // groups native scripts by address and native script (pkh and unlockTime)\n  // This is to extract unique products of the form { address, nativeScript }\n  const groupedByAddress: {\n    [address: string]: SingleScriptAsset[];\n  } = groupBy(\n    withAddress,\n    (entry) =>\n      entry.address + entry.nativeScript.pkh + entry.nativeScript.unlockTime\n  );\n\n  // traverse each individual group and merge the assets field\n  const mergedAssets: ScriptAssets[] = Object.values(groupedByAddress).map(\n    (entries) =>\n      entries.reduce(\n        (acc: ScriptAssets, entry) => ({\n          ...acc,\n          assets: [...acc.assets, entry.asset],\n        }),\n        { ...entries[0], assets: [] }\n      )\n  );\n\n  return mergedAssets;\n};\n","import {\n  Lucid,\n  Blockfrost,\n  UTxO,\n  Assets,\n  Network,\n  WalletProvider,\n} from \"lucid-cardano\";\nimport {\n  buildTimelockedNativeScript,\n  claimChecks,\n  deduplicateUtxosReducer,\n  groupByScript,\n  ToClaim,\n} from \"./util\";\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    cardano: any;\n  }\n}\n\nconst lookupAvailableFunds = (lucid: Lucid) => async (toClaim: ToClaim) => {\n  const groupedByScript = groupByScript(toClaim);\n\n  const addressesWithUtxos = await Promise.all(\n    groupedByScript.map(async (x) => {\n      const utxos = await lucid.utxosAt(x.address);\n\n      const predicates = claimChecks(lucid)(\n        x.nativeScript.pkh,\n        x.nativeScript.unlockTime,\n        x.assets\n      );\n\n      const claimableUtxos = utxos.filter((u) => predicates.every((p) => p(u)));\n\n      return {\n        utxos: claimableUtxos,\n        nativeScript: x.nativeScript,\n        address: x.address,\n      };\n    })\n  );\n\n  return addressesWithUtxos.filter((x) => !!x.utxos.length);\n};\n\nconst totalClaimableUtxos = (\n  flattenedUtxos: {\n    utxos: UTxO[];\n    nativeScript: { pkh: string; unlockTime: number };\n  }[]\n) =>\n  flattenedUtxos\n    .reduce(deduplicateUtxosReducer, [])\n    .map((x) => x.assets)\n    .flat()\n    .reduce(\n      (acc: Assets, cur: Assets) =>\n        Object.entries(cur).reduce(\n          (acc2: Assets, [a, v]) =>\n            a in acc2\n              ? { ...acc2, [a]: acc2[a].valueOf() + v.valueOf() }\n              : { ...acc2, [a]: v },\n          acc\n        ),\n      {}\n    );\n\nconst claimVestedFunds = (lucid: Lucid) => async (toClaim: ToClaim) => {\n  const claimableUtxos = await lookupAvailableFunds(lucid)(toClaim);\n\n  if (!claimableUtxos.length) throw Error(\"Nothing to claim\");\n\n  const natives = claimableUtxos.map((x) =>\n    buildTimelockedNativeScript(x.nativeScript.unlockTime, x.nativeScript.pkh)\n  );\n\n  const tx = lucid\n    .newTx()\n    .collectFrom(claimableUtxos.map((x) => x.utxos).flat())\n    .payToAddress(\n      await lucid.wallet.address(),\n      totalClaimableUtxos(claimableUtxos)\n    );\n\n  natives.forEach((n) => tx.txBuilder.add_native_script(n));\n\n  const txScriptAttached = await tx.validFrom(Date.now() - 100000).complete();\n\n  const signed = await txScriptAttached.sign().complete();\n\n  const txHash = await signed.submit();\n  return txHash;\n};\n\n/**\n * Initialise the library and expose lib API\n * @param {string} blockfrostUrl Blockfrost API URL\n * @param {string} apiKey Blockfrost API Key\n * @param wallet Either bech32 encoded signing key or a browser wallet provider.\n * @param {string} [network]\n * @namespace cardashift-lucid-contracts\n */\nconst init = async (\n  blockfrostUrl: string,\n  apiKey: string,\n  wallet: string | WalletProvider,\n  network: Network = \"Testnet\"\n) => {\n  const lucid = await Lucid.new(new Blockfrost(blockfrostUrl, apiKey), network);\n\n  if (wallet.startsWith(\"ed25519\")) {\n    lucid.selectWalletFromPrivateKey(wallet);\n  } else {\n    // For browser wallet:\n    lucid.selectWallet(wallet);\n  }\n\n  const getEndpointData = (): Promise<ToClaim> =>\n    fetch(\"http://localhost:8000/data.json\").then((r) => r.json());\n\n  return {\n    /**\n     * Query and return available funds that can be claimed optionally based on\n     * given claim data, otherwise fetches claim data from configured endpoint otherwise.\n     * @memberof cardashift-lucid-contracts\n     */\n    fundsAvailable: async (epData?: ToClaim) =>\n      totalClaimableUtxos(\n        await lookupAvailableFunds(lucid)(epData || (await getEndpointData()))\n      ),\n    /**\n     * Claim available funds optionally from given claim data when param is\n     * provided, otherwise request claim data from configured endpoint.\n     * @memberof cardashift-lucid-contracts\n     * @param {ToClaim} [epData] Optional endpoint data to claim from\n     */\n    claimFunds: async (epData?: ToClaim) =>\n      claimVestedFunds(lucid)(epData || (await getEndpointData())),\n  };\n};\n\nexport default init;\n"],"names":["groupBy","array","predicate","reduce","acc","cur","key","push","deduplicateUtxosReducer","utxos","filter","newUtxo","some","existingUtxo","txHash","outputIndex","claimChecks","lucid","pkh","unlockTime","assets","utils","unixTimeToSlot","Date","now","u","assetsConcat","map","asset","assetConcat","currencySymbol","tokenName","length","containsAssets","Object","keys","includes","buildTimelockedNativeScript","slot","ns","C","NativeScripts","add","NativeScript","new_timelock_start","TimelockStart","BigNum","from_str","toString","new_script_pubkey","ScriptPubkey","Ed25519KeyHash","from_hex","scriptAll","ScriptAll","new_script_all","groupByScript","toClaim","withAddress","entries","address","entry","flat","groupedByAddress","nativeScript","mergedAssets","values","lookupAvailableFunds","groupedByScript","Promise","all","x","utxosAt","predicates","claimableUtxos","every","p","addressesWithUtxos","totalClaimableUtxos","flattenedUtxos","acc2","a","v","valueOf","claimVestedFunds","Error","natives","newTx","collectFrom","wallet","tx","payToAddress","forEach","n","txBuilder","add_native_script","validFrom","complete","txScriptAttached","sign","signed","submit","init","blockfrostUrl","apiKey","network","Lucid","Blockfrost","startsWith","selectWalletFromPrivateKey","selectWallet","getEndpointData","fetch","then","r","json","fundsAvailable","epData","claimFunds"],"mappings":"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"}